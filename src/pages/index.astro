---
import { getCollection } from "astro:content";

// Importation des layouts
import BaseLayout from "../layouts/BaseLayout.astro";

// Importation des composants
import CallToAction from "../components/CallToAction.astro";
import Grid from "../components/Grid.astro";
import Hero from "../components/Hero.astro";
import Icon from "../components/Icon.astro";
import Pill from "../components/Pill.astro";
import PortfolioPreview from "../components/PortfolioPreview.astro";

// Page section components
import ContactCTA from "../components/ContactCTA.astro";
import Skills from "../components/Skills.astro";
import type { iconPaths } from "../components/IconPaths";

// Content Fetching: List four most recent work projects
const projects = (await getCollection("work"))
  .sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf())
  .slice(0, 4);

const cvLink: { label: string; href: string; icon: keyof typeof iconPaths }[] =
  [
    {
      label: "cv",
      href: "/assets/curriculum-vitæ_dev.pdf",
      icon: "cv",
    },
  ];

// Full Astro Component Syntax:
// https://docs.astro.build/basics/astro-components/
---

<BaseLayout>
  <div class="stack gap-20 lg:gap-48">
    <div class="wrapper stack gap-8 lg:gap-20">
      <header class="hero">
        <Hero
          title="Développeuse web // Junior"
          tagline="Actuellement en formation"
          align="start"
        >
          <div class="roles-container">
            <Pill><Icon icon="code" size="1.33em" /> Code </Pill>
            <Pill><Icon icon="color-picker" size="1.33em" />Graphisme</Pill>
            <Pill><Icon icon="pencil-line" size="1.33em" />Rédaction</Pill>
            <p class="cv-link">
              {
                cvLink.map((link) => (
                  <a href={link.href} target="_blank" rel="noopener noreferrer">
                    <Icon icon={link.icon} size="1.33em" /> {link.label}
                  </a>
                ))
              }
            </p>
          </div>
        </Hero>

        <img
          alt="logo de Marion Sabatier"
          width="400"
          height="600"
          src="/assets/portrait.jpg"
        />
      </header>

      <Skills />
    </div>

    <main class="wrapper stack gap-20 lg:gap-48">
      <section class="section with-background with-cta">
        <header class="section-header stack gap-2 lg:gap-4">
          <h3>Mes projets</h3>
          <p>
         Un pêle-mêle de mes projets réalisés en formation et certains perso 
          </p>
        </header>

        <div class="gallery">
          <Grid variant="offset">
            {
              projects.map((project) => (
                <li>
                  <PortfolioPreview project={project} />
                </li>
              ))
            }
          </Grid>
        </div>
      </section>

        <div class="cta">
          <CallToAction href="/work/">
            Tout voir
            <Icon icon="arrow-right" size="1.2em" />
          </CallToAction>
        </div>

      <section class="section with-background bg-variant">
        <header class="section-header stack gap-2 lg:gap-4">
          <h3>Mes pins GitHub</h3>
          <p>
            Mes repos GitHub préférés que j'ai choisi d'épingler sur mon profil
            GitHub
          </p>
        </header>

        <div class="gallery">
          <Grid variant="small">
            {
              ["", "", "", "", "", ""].map((brand: string) => (
                <a href="" target="_blank">
                  <li class="mention-card">
                    <p>{brand}</p>
                    <img src="" />
                  </li>
                </a>
              ))
            }
          </Grid>
        </div>
      </section>
    </main>

    <ContactCTA />
  </div>
</BaseLayout>

<!------------------------ CSS ------------------------->
<style>
  .cv-link a {
    color: var(--accent-regular);
    text-decoration: none;
    cursor: pointer;
    border: none;
    background: transparent;
    align-items: center;
    float: left;
    transition: 0.5s linear;
    position: relative;
    padding: 1rem;
    background: transparent;
    font-weight: 900;
    font-size: var(--text-xll);
  }

  .cv-link a:before {
    position: absolute;
    content: "";
    left: 0;
    bottom: 0;
    height: 4px;
    width: 100%;
    border-radius: 999rem;
    border-bottom: 4px solid transparent;
    border-left: 4px solid transparent;
    box-sizing: border-box;
    transform: translateX(100%);
  }

  .cv-link a:after {
    position: absolute;
    content: "";
    top: 0;
    left: 0;
    width: 100%;
    height: 4px;
    border-radius: 999rem;
    border-top: 4px solid transparent;
    border-right: 4px solid transparent;
    box-sizing: border-box;
    transform: translateX(-100%);
  }

  .cv-link a:hover:before {
    border-color: var(--gray-700);
    height: 100%;
    transform: translateX(0);
    transition:
      0.2s transform linear,
      0.2s height linear 0.3s;
  }

  .cv-link a:hover:after {
    border-color: var(--gray-100);
    height: 100%;
    transform: translateX(0);
    transition:
      0.2s transform linear,
      0.1s height linear 0.5s;
  }

  .cv-link a:hover {
    color: var(--gray-0);
  }

  .hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 2rem;
  }

  .roles {
    display: none;
  }

  .roles-container {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
  }

  .hero img {
    width: 280px;
    height: 280px;
    aspect-ratio: 1;
    border-radius: 24px;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transition:
      transform 0.3s ease,
      box-shadow 0.3s ease;
    object-fit: cover;
    object-position: top;
  }

  .hero img:hover {
    transform: translateY(-5px);
    box-shadow:
      0 25px 30px -5px rgba(0, 0, 0, 0.15),
      0 15px 15px -5px rgba(0, 0, 0, 0.08);
  }

  @media (min-width: 50em) {
    .hero {
      display: grid;
      grid-template-columns: 6fr 4fr;
      padding-inline: 2.5rem;
      gap: 3.75rem;
    }

    .roles {
      margin-top: 1rem;
      display: flex;
      gap: 1rem;
    }

    .roles-container {
      margin-top: 1rem;
    }

    .hero img {
      aspect-ratio: 4 / 3;
      border-radius: 999rem;
    }
  }

  /* ====================================================== */

  .section {
    display: grid;
    gap: 2rem;
  }

  .with-background {
    position: relative;
  }

  .with-background::before {
    --hero-bg: var(--bg-image-subtle-2);

    content: "";
    position: absolute;
    pointer-events: none;
    left: 50%;
    width: 100vw;
    aspect-ratio: calc(2.25 / var(--bg-scale));
    top: 0;
    transform: translateY(-75%) translateX(-50%);
    background:
      url("/assets/backgrounds/noise.png") top center/220px repeat,
      /* var(--hero-bg) center center / var(--bg-gradient-size) no-repeat, */
        var(--gray-999);
    /* background-blend-mode: overlay, normal, normal, normal; */
    mix-blend-mode: var(--bg-blend-mode);
    z-index: -1;
  }

  .with-background.bg-variant::before {
    --hero-bg: var(--bg-image-subtle-1);
  }

  .section-header {
    justify-self: center;
    text-align: center;
    max-width: 50ch;
    font-size: var(--text-md);
    color: var(--gray-300);
  }

  .section-header h3 {
    font-size: var(--text-2xl);
  }

  @media (min-width: 50em) {
    .section {
      grid-template-columns: repeat(4, 1fr);
      grid-template-areas: "header header header header" "gallery gallery gallery gallery";
      gap: 5rem;
    }

    .section.with-cta {
      grid-template-areas: "header header header cta" "gallery gallery gallery gallery";
    }

    .section-header {
      grid-area: header;
      font-size: var(--text-lg);
    }

    .section-header h3 {
      font-size: var(--text-4xl);
    }

    .with-cta .section-header {
      justify-self: flex-start;
      text-align: left;
    }

    .gallery {
      grid-area: gallery;
    }

    .cta {
      grid-area: cta;
      width: 50%;
    }
  }

  /* ====================================================== */

  .mention-card {
    display: flex;
    height: 12rem;
    justify-content: center;
    align-items: center;
    text-align: center;
    border: 1px solid var(--gray-800);
    border-radius: 1.5rem;
    color: var(--gray-300);
    background: var(--gradient-subtle);
    box-shadow: var(--shadow-sm);
    background-size: cover;
  }

  @media (min-width: 50em) {
    .mention-card {
      border-radius: 1.5rem;
      height: 15rem;
    }
  }
</style>

<!-- a ce moment là dans la formation pas de react donc js -->
<script>
  // en asynchrone les données ne sont récup que dans le try cash de cette fonction
  async function ReposRecup() {
    try {
      const response = await fetch(
        "https://gh-pinned-repos-tsj7ta5xfhep.deno.dev/?username=Esteranodin"
      );
      if (!response.ok) {
        throw new Error("Réponse réseau erronée");
      }
      const datas = await response.json();

      if (datas.length === 0) {
        throw new Error("Aucun repo épinglé trouvé");
      }
      // permet de recup les données dans une nouvelle fonction pour les afficher
      ReposDisplay(datas);
    } catch (error: any) {
      if (error.message === "Network response was not ok") {
        console.log("Your network may be down. Please try again.");
      } else if (error.message === "No pinned repos found") {
        console.log("No pinned repos found");
      } else {
        console.log("Error fetching repos");
      }
      console.error("Error fetching repos:", error);
    }
  }

  ReposRecup();

  function ReposDisplay(
    datas: { repo: string; link: string; image: string }[]
  ) {
    const mentionCards = document.querySelectorAll(".mention-card");

    mentionCards.forEach((card, index) => {
      // attention ne récup que l'enfant 1, cad le p, sur les trois enfant de la nodelist mentionCards

      let lienRepo = card.parentNode as HTMLAnchorElement;

      console.log(lienRepo);

      if (datas[index] !== undefined) {
        // titreRepo.innerText = datas[index].repo;
        lienRepo.href = datas[index].link;
        (card as HTMLElement).style.backgroundImage =
          `url(${datas[index].image})`;
      }
    });
  }
</script>
